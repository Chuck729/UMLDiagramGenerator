digraph uml { rankdir=BT;0 [ shape = "record" , label = "{ problem.AppLauncherApplication | | - clearEverything(java.util.List\<java.lang.Process\>) : void \l + main(java.lang.String[]) : void \l }", ]; 1 [ shape = "record" , label = "{ problem.ApplicationLauncher | - runners: java.util.Map\<java.lang.String,problem.ProcessRunner\> \l | + directoryChanged(problem.DirectoryEvent) : void \l + getRunners() : java.util.Collection\<problem.ProcessRunner\> \l + addRunner(java.lang.String, problem.ProcessRunner) : void \l + shutDown() : void \l + getApplicationsCount() : int \l }", ]; 1->8[style="dashed", arrowhead="onormal", ] 1->11[headlabel="1\:M", style="solid", arrowhead="vee", ] 1->4[style="dashed", arrowhead="vee", ] 2 [ shape = "record" , label = "{ problem.DataFileRunner | | + execute(java.nio.file.Path) : void \l }", ]; 2->11[style="solid", arrowhead="onormal", ] 3 [ shape = "record" , label = "{ problem.DirectoryChangeLogger | - numberOfLogs: int \l | + directoryChanged(problem.DirectoryEvent) : void \l + getNumberOfLogs() : int \l }", ]; 3->9[style="dashed", arrowhead="onormal", ] 3->4[style="dashed", arrowhead="vee", ] 4 [ shape = "record" , label = "{ problem.DirectoryEvent | - eventType: java.lang.String \l - dir: java.nio.file.Path \l - directoryMonitorService: problem.IDirectoryMonitorService \l | + getEventType() : java.lang.String \l + getFile() : java.nio.file.Path \l + getSource() : problem.IDirectoryMonitorService \l }", ]; 4->10[style="solid", arrowhead="vee", ] 5 [ shape = "record" , label = "{ problem.DirectoryMonitorService | - dir: java.nio.file.Path \l - stop: boolean \l - watcher: java.nio.file.WatchService \l - listeners: java.util.List\<problem.IDirectoryListener\> \l | + getDirectory() : java.nio.file.Path \l + isRunning() : boolean \l + stopGracefully() : void \l + addListener(problem.IDirectoryListener) : void \l + removeListener(problem.IDirectoryListener) : void \l - notifyListener(problem.DirectoryEvent) : void \l + run() : void \l }", ]; 5->10[style="dashed", arrowhead="onormal", ] 5->9[headlabel="1\:M", style="solid", arrowhead="vee", ] 5->4[style="dashed", arrowhead="vee", ] 6 [ shape = "record" , label = "{ problem.ExecutableFileRunner | | + execute(java.nio.file.Path) : void \l }", ]; 6->11[style="solid", arrowhead="onormal", ] 7 [ shape = "record" , label = "{ problem.HtmlFileRunner | | + execute(java.nio.file.Path) : void \l }", ]; 7->11[style="solid", arrowhead="onormal", ] 8 [ shape = "record" , label = "{ \<\<Interface\>\>\l problem.IApplicationLauncher | | + getRunners() : java.util.Collection\<problem.ProcessRunner\> \l + addRunner(java.lang.String, problem.ProcessRunner) : void \l + shutDown() : void \l + getApplicationsCount() : int \l }", ]; 8->9[style="dashed", arrowhead="onormal", ] 8->11[headlabel="1\:M", style="dashed", arrowhead="vee", ] 9 [ shape = "record" , label = "{ \<\<Interface\>\>\l problem.IDirectoryListener | | + directoryChanged(problem.DirectoryEvent) : void \l }", ]; 9->4[style="dashed", arrowhead="vee", ] 10 [ shape = "record" , label = "{ \<\<Interface\>\>\l problem.IDirectoryMonitorService | | + getDirectory() : java.nio.file.Path \l + isRunning() : boolean \l + stopGracefully() : void \l + addListener(problem.IDirectoryListener) : void \l + removeListener(problem.IDirectoryListener) : void \l }", ]; 10->9[style="dashed", arrowhead="vee", ] 11 [ shape = "record" , label = "{ \<\<Abstract\>\>\l problem.ProcessRunner | - processes: java.util.List\<java.lang.Process\> \l - command: java.lang.String \l | + getProcesses() : java.util.List\<java.lang.Process\> \l + getCommand() : java.lang.String \l + execute(java.nio.file.Path) : void \l }", ]; 12 [ shape = "record" , label = "{ problem.TempFileRunner | | + execute(java.nio.file.Path) : void \l }", ]; 12->11[style="solid", arrowhead="onormal", ]  }